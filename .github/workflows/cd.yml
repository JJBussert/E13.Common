name: CD

on:
  push:
    branches:
      - main

env:
  DOTNET_VERSION: '9.0.x'

jobs:
  pre:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set Version
        id: set-version
        run: |
          year=$(date +%Y)
          day=$(date +%j)
          # Get the run number for today
          run_number=$(( ${{ github.run_number }} % 1000 ))  # Ensures number stays within reasonable range
          version="${year}.${day}.${run_number}"
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "Version: ${version}"

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Tag Build
        shell: pwsh
        run: ./.github/scripts/tagbuild.ps1

  batch0:
    needs: pre
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build and Push Core
        uses: ./.github/actions/nuget-package
        with:
          project: E13.Common.Core
          version: ${{ needs.pre.outputs.version }}
          nuget-key: ${{ secrets.NUGET_API_KEY }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  batch1:
    needs: [batch0, pre]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [E13.Common.Nunit, E13.Common.Domain, E13.Common.RestEase, E13.Common.Cli]
    steps:
      - uses: actions/checkout@v4
      - name: Build and Push ${{ matrix.project }}
        uses: ./.github/actions/nuget-package
        with:
          project: ${{ matrix.project }}
          version: ${{ needs.pre.outputs.version }}
          nuget-key: ${{ secrets.NUGET_API_KEY }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  batch2:
    needs: [batch1, pre]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [E13.Common.Data, E13.Common.AspNet]
    steps:
      - uses: actions/checkout@v4
      - name: Build and Push ${{ matrix.project }}
        uses: ./.github/actions/nuget-package
        with:
          project: ${{ matrix.project }}
          version: ${{ needs.pre.outputs.version }}
          nuget-key: ${{ secrets.NUGET_API_KEY }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  batch3:
    needs: [batch2, pre]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [E13.Common.Api, E13.Common.Blazor, E13.Common.Data.Db, E13.Common.Logic, E13.Common.Nunit.UI]
    steps:
      - uses: actions/checkout@v4
      - name: Build and Push ${{ matrix.project }}
        uses: ./.github/actions/nuget-package
        with:
          project: ${{ matrix.project }}
          version: ${{ needs.pre.outputs.version }}
          nuget-key: ${{ secrets.NUGET_API_KEY }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  batch4:
    needs: [batch3, pre]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build and Push Nunit.Api
        uses: ./.github/actions/nuget-package
        with:
          project: E13.Common.Nunit.Api
          version: ${{ needs.pre.outputs.version }}
          nuget-key: ${{ secrets.NUGET_API_KEY }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  post:
    needs: [batch4, pre]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Git Setup
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          
      - name: Merge and Push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git checkout -b deploy origin/deploy
          files=$(git diff deploy...main --name-only)
          create_release=false
          for file in $files; do
            if [[ $file == src/* ]]; then
              create_release=true
              break
            fi
          done
          echo "CREATE_RELEASE=$create_release" >> $GITHUB_ENV
          git merge main
          git push origin deploy

      - name: Create Release
        if: env.CREATE_RELEASE == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.pre.outputs.version }}
          release_name: Release ${{ needs.pre.outputs.version }}
          draft: false
          prerelease: false
